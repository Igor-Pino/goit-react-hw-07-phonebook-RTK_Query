{"version":3,"sources":["components/ContactItem/ContactItem.module.scss","styles/base.module.scss","components/ContactsList/ContactsList.module.scss","components/ContactFilter/ContactFilter.module.scss","redux/operations/operations.js","redux/actions/contacts-actions.js","redux/reducers/contacrBookReducer.js","redux/store.js","components/ContactInput/ContactInput.js","redux/PhoneBook-selectors.js","components/ContactItem/ContactItem.js","components/ContactsList/ContactsList.js","components/ContactFilter/ContactFilter.js","App.js","index.js"],"names":["module","exports","axios","defaults","baseURL","getContacts","createAsyncThunk","_","a","rejectWithValue","get","data","response","addContact","contact","post","deleteContact","contactId","delete","filterChange","createAction","contacts","createReducer","fulfilled","action","payload","state","filter","id","loading","pending","rejected","error","combineReducers","store","configureStore","reducer","contactBook","contactBookReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","ContactInput","useState","name","setName","phone","setNumber","nameInputId","ShortId","generate","numberInputId","inputContact","stateContacts","useSelector","dispatch","useDispatch","handelChange","e","target","value","compareContacts","newContact","find","toLowerCase","alert","onSubmit","preventDefault","type","pattern","title","required","onChange","getFilter","getLoading","contactFilter","normalizedFilter","filteredContacts","includes","ContactItem","onDeleteContact","className","s","contactItem","contact_name","contact_phone","onClick","contact_btn","ContactsList","useEffect","contact_list","map","number","Filter","filterValue","filter_label","App","loader","main_container","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.8d29c50f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ContactItem_root__154kY\",\"main_container\":\"ContactItem_main_container__NGjvV\",\"title\":\"ContactItem_title__30Pqs\",\"contact_btn\":\"ContactItem_contact_btn__1S1lx\",\"contact\":\"ContactItem_contact__2Yu5Z\",\"contact_number\":\"ContactItem_contact_number__33pWn\",\"contactItem\":\"ContactItem_contactItem__2sC23\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"base_root__2iNRM\",\"main_container\":\"base_main_container__O72rR\",\"title\":\"base_title__25qpJ\",\"contact_btn\":\"base_contact_btn__2Kv86\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ContactsList_root__1Twrl\",\"main_container\":\"ContactsList_main_container__28UoY\",\"title\":\"ContactsList_title__oO1Mo\",\"contact_btn\":\"ContactsList_contact_btn__1GbEc\",\"contact_list\":\"ContactsList_contact_list__Qz1fr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ContactFilter_root__1TdMK\",\"main_container\":\"ContactFilter_main_container__2LACK\",\"title\":\"ContactFilter_title__3zmqJ\",\"contact_btn\":\"ContactFilter_contact_btn__3oXCc\",\"filter_label\":\"ContactFilter_filter_label__1ZHeN\"};","import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'https://61b73cf9c95dd70017d413d0.mockapi.io';\n\nconst getContacts = createAsyncThunk('contacts/getContacts', async (_, { rejectWithValue }) => {\n  try {\n    const { data } = await axios.get('/contacts');\n    return data;\n  } catch (err) {\n    return rejectWithValue(err.response.data);\n  }\n});\n\nconst addContact = createAsyncThunk(\n  'contacts/addContacts',\n  async (contact, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.post('/contacts', contact);\n      return data;\n    } catch (err) {\n      return rejectWithValue(err.response.data);\n    }\n  },\n);\n\nconst deleteContact = createAsyncThunk(\n  'contacts/deleteContacts',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      await axios.delete(`/contacts/${contactId}`);\n      return contactId;\n    } catch (err) {\n      return rejectWithValue(err.response.data);\n    }\n  },\n);\n\nexport { getContacts, addContact, deleteContact };\n\n// import {\n//   // getContactError,\n//   // getContactRequest,\n//   // getContactSuccess,\n//   // addContactSuccess,\n//   // addContactError,\n//   // addContactRequest,\n//   // deleteContactRequest,\n//   // deleteContactSuccess,\n//   // deleteContactError,\n// } from '../actions/contacts-actions';\n\n// const getContacts = () => async dispatch => {\n//   dispatch(getContactRequest());\n//   try {\n//     const { data } = await axios.get('/contacts');\n//     dispatch(getContactSuccess(data));\n//   } catch (error) {\n//     getContactError(error);\n//   }\n// };\n\n// const addContact = contact => dispatch => {\n//   dispatch(addContactRequest());\n//   axios\n//     .post('/contacts', contact)\n//     .then(response => response.data)\n//     .then(data => dispatch(addContactSuccess(data)))\n//     .catch(error => addContactError(error));\n// };\n\n// const deleteContact = contactId => dispatch => {\n//   dispatch(deleteContactRequest());\n//   axios\n//     .delete(`/contacts/${contactId}`)\n//     .then(() => dispatch(deleteContactSuccess(contactId)))\n//     .catch(error => deleteContactError(error));\n// };\n","import { createAction } from '@reduxjs/toolkit';\n\nconst getContactRequest = createAction('contacts/getContactRequest');\nconst getContactSuccess = createAction('contacts/getContactSuccess');\nconst getContactError = createAction('contacts/getContactError');\n\nconst addContactRequest = createAction('contacts/addContactRequest');\nconst addContactSuccess = createAction('contacts/addContactSuccess');\nconst addContactError = createAction('contacts/addContactError');\nconst deleteContact = createAction('contacts/delete');\nconst filterChange = createAction('contacts/changeFilter');\n\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nconst deleteContactError = createAction('contacts/deleteContactError');\n\nexport {\n  getContactError,\n  getContactRequest,\n  getContactSuccess,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  addContactRequest,\n  deleteContact,\n  filterChange,\n  addContactSuccess,\n  addContactError,\n};\n\n// const addContact = createAction('contacts/add', ({ name, number }) => {\n//   return {\n//     payload: {\n//       id: ShortId.generate(),\n//       name: name,\n//       number: number,\n//     },\n//   };\n// });\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { getContacts, addContact, deleteContact } from '../operations/operations';\nimport { filterChange } from '../actions/contacts-actions';\n\nconst contacts = createReducer([], {\n  [getContacts.fulfilled]: (_, action) => action.payload,\n  [addContact.fulfilled]: (state, action) => [...state, action.payload],\n  [deleteContact.fulfilled]: (state, action) => state.filter(({ id }) => id !== action.payload),\n});\n\nconst filter = createReducer('', {\n  [filterChange]: (_, action) => action.payload,\n});\n\nconst loading = createReducer(false, {\n  [getContacts.pending]: () => true,\n  [getContacts.fulfilled]: () => false,\n  [getContacts.rejected]: () => false,\n  [addContact.pending]: () => true,\n  [addContact.fulfilled]: () => false,\n  [addContact.rejected]: () => false,\n  [deleteContact.pending]: () => true,\n  [deleteContact.fulfilled]: () => false,\n  [deleteContact.rejected]: () => false,\n});\n\nconst error = createReducer(null, {\n  [getContacts.rejected]: (_, action) => action.payload,\n  [addContact.rejected]: (_, action) => action.payload,\n  [deleteContact.rejected]: (_, action) => action.payload,\n  [getContacts.pending]: () => null,\n  [addContact.pending]: () => null,\n  [deleteContact.pending]: () => null,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n  loading,\n  error,\n});\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport { FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\n\n// import storage from 'redux-persist/lib/storage';\nimport contactBookReducer from './reducers/contacrBookReducer';\nimport logger from 'redux-logger';\n\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\nconst store = configureStore({\n  reducer: {\n    contactBook: contactBookReducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport { store };\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ShortId from 'shortid';\n// import { addContact } from '../../redux/actions/contacts-actions';\nimport { addContact } from '../../redux/operations/operations';\n\nfunction ContactInput() {\n  const [name, setName] = useState('');\n  const [phone, setNumber] = useState('');\n\n  const nameInputId = ShortId.generate();\n  const numberInputId = ShortId.generate();\n\n  const inputContact = { name, phone };\n\n  const stateContacts = useSelector(state => state.contactBook.contacts);\n\n  const dispatch = useDispatch();\n\n  const onSubmit = () => dispatch(addContact(inputContact));\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handelChange = e => {\n    const inputName = e.target.name;\n    switch (inputName) {\n      case 'name':\n        setName(e.target.value);\n        break;\n\n      case 'number':\n        setNumber(e.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const compareContacts = newContact => {\n    if (\n      stateContacts.find(contact => contact.name.toLowerCase() === newContact.name.toLowerCase())\n    ) {\n      alert(`${newContact.name} is already in contacts!`);\n      return;\n    }\n    onSubmit(newContact);\n  };\n\n  const handelSubmit = e => {\n    e.preventDefault();\n\n    compareContacts(inputContact);\n\n    reset();\n  };\n\n  return (\n    <form onSubmit={handelSubmit}>\n      <label id={nameInputId}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          id={nameInputId}\n          onChange={handelChange}\n        />\n      </label>\n      <label id={numberInputId}>\n        Phone\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={phone}\n          id={numberInputId}\n          onChange={handelChange}\n        />\n      </label>\n      <button type=\"submit\">add contact</button>\n    </form>\n  );\n}\n\nexport default ContactInput;\n","const getContacts = state => state.contactBook.contacts;\nconst getFilter = state => state.contactBook.filter;\nconst getLoading = state => state.contactBook.loading;\n\nconst contactFilter = state => {\n  const normalizedFilter = getFilter(state).toLowerCase();\n  const filteredContacts = getContacts(state).filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n  return filteredContacts;\n};\n\nexport { getContacts, getFilter, getLoading, contactFilter };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactItem.module.scss';\n\nconst ContactItem = ({ id, name, phone, onDeleteContact }) => (\n  <li className={s.contactItem}>\n    <div>\n      <span className={s.contact_name}>{name}</span>\n      <span className={s.contact_phone}>{phone}</span>\n    </div>\n    <button onClick={() => onDeleteContact(id)} className={s.contact_btn}>\n      X\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { deleteContact } from '../../redux/actions/contacts-actions';\nimport { deleteContact, getContacts } from '../../redux/operations/operations';\nimport { contactFilter } from '../../redux/PhoneBook-selectors';\nimport ContactItem from '../ContactItem';\nimport s from './ContactsList.module.scss';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetchContacts = () => dispatch(getContacts());\n\n    fetchContacts();\n  }, [dispatch]);\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  const contacts = useSelector(contactFilter);\n\n  return (\n    <ul className={s.contact_list}>\n      {contacts.map(contact => (\n        <ContactItem\n          key={contact.id}\n          id={contact.id}\n          name={contact.name}\n          number={contact.number}\n          onDeleteContact={() => onDeleteContact(contact.id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterChange } from '../../redux/actions/contacts-actions';\nimport { getFilter } from '../../redux/PhoneBook-selectors';\nimport s from './ContactFilter.module.scss';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const onChange = e => dispatch(filterChange(e.target.value));\n  const filterValue = useSelector(getFilter);\n\n  return (\n    <label>\n      <span className={s.filter_label}>Contact filter</span>\n      <input type=\"text\" name=\"filter\" value={filterValue} onChange={onChange} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import ContactInput from './components/ContactInput';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport { useSelector } from 'react-redux';\nimport Filter from './components/ContactFilter';\nimport { getLoading } from './redux/PhoneBook-selectors';\nimport s from './styles/base.module.scss';\n\nfunction App() {\n  const loader = useSelector(getLoading);\n\n  return (\n    <div className={s.main_container}>\n      <h1 className={s.title}>Phonebook</h1>\n\n      <ContactInput />\n      {loader ? <h2>loading...</h2> : <h2 className={s.title}>Contacts</h2>}\n      {/* <h2 className={s.title}>Contacts</h2>\n      {loader && <h1>loading</h1>} */}\n      <Filter />\n\n      <ContactsList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}